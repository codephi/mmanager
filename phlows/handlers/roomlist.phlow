steps:
  - id: query
    assert: true
    payload:
      limit: !phs if is_empty(main.query_params.limit) { 10 } else { main.query_params.limit }
      offset: !phs if is_empty(main.query_params.offset) { 12 } else { main.query_params.offset }

  - use: cache
    input:
      action: get
      key: !phs `roomlist:${steps.query.limit}-${steps.query.offset}`

  - assert: !phs payload.found && !is_empty(payload.value)
    then:
      - use: log
        input:
          message: !phs `Cache hit for limit=${steps.query.limit} and offset=${steps.query.offset}`
      - return:
          status: 200
          body: !phs payload.value
          headers:
            Content-Type: application/json

  - use: log
    input:
      message: !phs `Fetching room list with limit=${steps.query.limit} and offset=${steps.query.offset}`

  - id: fetch_rooms
    use: http_request
    input:
      method: GET
      url: !phs `https://chaturbate.com/api/ts/roomlist/room-list/?limit=${steps.query.limit}&offset=${steps.query.offset}`
      headers:
          Accept: application/json
          cache: true

  - use: log
    input:
      message:
        status_code: !phs steps.fetch_rooms.response.status_code
        body: !phs len(steps.fetch_rooms.response.body)

  - id: result
    assert: !phs steps.fetch_rooms.response.status_code == 200
    payload: !phs steps.fetch_rooms.response.body


  - use: cache
    input:
      action: set
      key: !phs `roomlist:${steps.query.limit}-${steps.query.offset}`
      value: !phs steps.result

  - return:
      status: 200
      body: !phs steps.result
      headers:
        Content-Type: application/json
